- hosts: routers
  name: Routers

  vars:
    ansible_user: root
    openwrt_network_wan_proto: pppoe
    openwrt_network_wan_username: "{{ pppoe_user }}"
    openwrt_network_wan_password: "{{ pppoe_pass }}"
    openwrt_system_zonename: Europe/Berlin
    openwrt_wireless_country: DE
    openwrt_wireless_ssid: "{{ wifi_ssid }}"
    openwrt_wireless_encryption: sae-mixed
    openwrt_wireless_key: "{{ wifi_pass }}"

  roles:
    - nn708.openwrt.network
    - nn708.openwrt.system
    - nn708.openwrt.wireless
    - noleds

  tasks:
    - name: Remove conflicting packages
      community.general.opkg:
        name: "{{ item }}"
        state: absent
      loop:
        - wpad-basic-wolfssl
    - name: Install packages
      community.general.opkg:
        name: "{{ item }}"
        state: present
      loop:
        - wpad-wolfssl
        - kmod-nf-nathelper-extra
        - luci-ssl
        - luci-app-attendedsysupgrade
        - luci-app-sqm
        - tcpdump
        - tmux
        - umdns
        - zerotier
    - name: Enable and start services
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        - wpad
        - umdns
    - name: Copy authorized keys
      ansible.builtin.copy:
        src: files/authorized_keys
        dest: /etc/dropbear/authorized_keys
        owner: root
        group: root
        mode: 0600
    - name: Revert pending changes
      uci:
        command: revert
    - name: Set WAN to VLAN 7
      uci:
        command: set
        key: network.wan
        value:
          device: wan.7
    - name: Set WiFi radio channels
      uci:
        command: set
        key: "{{ item.key }}"
        value:
          channels: "{{ item.channels }}"
      loop:
        - { key: 'wireless.radio0', channels: '1 6 11' }
        - { key: 'wireless.radio1', channels: '32-144' }
    - name: Configure WiFi interfaces
      uci:
        command: ensure
        config: wireless
        type: wifi-iface
        find_by:
          device: "{{ item }}"
          mode: ap
        value:
          wpa_disable_eapol_key_retries: 1
          tdls_prohibit: 1
          ieee80211w: 1
      loop:
        - radio0
        - radio1
    - name: Cleanup wlan config
      uci:
        command: absent
        config: wireless
        type: wifi-iface
        find_by:
          device: "{{ item }}"
          mode: ap
        value:
          ieee80211k:
          rrm_neighbor_report:
          rrm_beacon_report:
          time_advertisement:
          time_zone:
          wnm_sleep_mode:
          bss_transition:
          ieee80211r:
          nasid:
      loop:
        - radio0
        - radio1
    - name: Configure zerotier network
      uci:
        command: set
        key: zerotier.openwrt_network
        value:
          join:
            - "{{ zerotier_join }}"
          enabled: 1
          secret: "{{ zerotier_secret }}"
        when: zerotier_join is defined and zerotier_secret is defined
    - name: Commit changes
      uci:
        command: commit
      notify: reload wifi

- hosts: aps
  name: Dumb APs

  vars:
    ansible_user: root
    openwrt_system_zonename: Europe/Berlin

  roles:
    - nn708.openwrt.system
    - nn708.openwrt.dumb_ap
    - noleds

  tasks:
    - name: Remove packages
      community.general.opkg:
        name: "{{ item }}"
        state: absent
      loop:
        - wpad-basic-wolfssl
    - name: Install packages
      community.general.opkg:
        name: "{{ item }}"
        state: present
      loop:
        - wpad-wolfssl
        - luci-app-attendedsysupgrade
        - luci-ssl
        - tmux
        - umdns
    - name: Enable and start services
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        - wpad
        - umdns
    - name: Copy authorized keys
      ansible.builtin.copy:
        src: files/authorized_keys
        dest: /etc/dropbear/authorized_keys
        owner: root
        group: root
        mode: 0600
    - name: Revert pending changes
      uci:
        command: revert
    - name: Set NTP
      uci:
        command: set
        key: system.ntp
        value:
          server:
            - 192.168.1.1
    - name: Turn off PoE
      uci:
        command: ensure
        config: system
        type: gpio_switch
        find_by:
          name: PoE Passthrough
        value:
          value: 0
      notify:
        - Restart gpio
      when: ansible_facts['openwrt_board']['board_name'] == "mikrotik,hap-ac3"
    - name: Commit changes
      uci:
        command: commit

  handlers:
    - name: Restart gpio
      ansible.builtin.service:
        name: gpio_switch
        state: reloaded

- hosts: arm64
  name: Raspberry Pi etc.

  tasks:
    - name: Update package cache once a week
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 86400
      register: aptcache
    - name: Update packages once a week
      ansible.builtin.apt:
        upgrade: dist
      when: aptcache.cache_updated
    - name: Copy authorized keys
      ansible.builtin.copy:
        src: files/authorized_keys
        dest: /root/.ssh/authorized_keys
        owner: root
        group: root
        mode: 0600
    - name: Harden sshd
      ansible.builtin.copy:
        src: files/raspios/sshd_harden.conf
        dest: /etc/ssh/sshd_config.d/
        owner: root
        group: root
        mode: 0600
      notify: Restart SSHD
      when: ansible_facts['os_family'] == "Debian" and ansible_facts['architecture'] == "aarch64"
    - name: SSHD CA Rollout
      ansible.builtin.copy:
        src: files/raspios/TrustedUserCAKeys.pub
        dest: /etc/ssh/
        owner: root
        group: root
        mode: 0600
      notify: Restart SSHD
      when: ansible_facts['os_family'] == "Debian" and ansible_facts['architecture'] == "aarch64"
    - name: Install needed packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - samba
        - vim
        - cups
    - name: Configure Samba
      ansible.builtin.copy:
        src: files/samba/
        dest: /etc/samba/
        owner: root
        group: root
        mode: 0600
        backup: true
      notify:
        - Restart Samba
    - name: Enable IPv6 on docker
      ansible.builtin.copy:
        src: files/raspios/daemon.json
        dest: /etc/docker/
        owner: root
        group: root
        mode: 0600
      notify: Restart docker
      tags: ['docker']
    - name: Prepare compose directories
      ansible.builtin.file:
        path: "/opt/dockers/{{ item }}"
        state: directory
        owner: root
        group: root
        mode: 0700
      loop:
        - external
        - internal
      tags: ['docker']
    - name: Create docker definitions
      ansible.builtin.template:
        src: "files/dockers/{{ item }}/docker-compose.yml.j2"
        dest: "/opt/dockers/{{ item }}/docker-compose.yml"
        owner: root
        group: root
        mode: 0600
        backup: true
      loop:
        - external
        - internal
      tags: ['docker']
    - name: Spin up external containers
      ansible.builtin.import_tasks: docker-compose.yaml
      vars:
        zone: external
      tags: ['docker']
    - name: Spin up internal containers
      ansible.builtin.import_tasks: docker-compose.yaml
      vars:
        zone: internal
      tags: ['docker']
    - name: Cleanup docker
      community.docker.docker_prune:
        containers: true
        containers_filters:
          until: 48h
        images: true
        builder_cache: true
      tags: ['docker']
  handlers:
    - name: Restart SSHD
      ansible.builtin.service:
        name: sshd
        state: restarted
    - name: Restart docker
      ansible.builtin.service:
        name: docker
        state: restarted
    - name: Restart Samba
      ansible.builtin.service:
        name: "{{ item }}"
        state: restarted
      loop:
        - smbd
        - nmbd
